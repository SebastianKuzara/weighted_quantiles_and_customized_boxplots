mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.85)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.85)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.85)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.85)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.85)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.82)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
mean(y)
var(y)
srednia <- numeric(n)
wariancja <- numeric(n)
n <- 10000
srednia <- numeric(n)
wariancja <- numeric(n)
for(i in 1:n) {
x <- rnorm(10000, log(sqrt(2)), 0.83)
y <- exp(x)
srednia[i] <- mean(y)
wariancja[i] <- var(y)
}
mean(srednia)
mean(wariancja)
n <- 10000
srednia <- numeric(n)
wariancja <- numeric(n)
for(i in 1:n) {
x <- rnorm(10000, log(sqrt(2)), 0.84)
y <- exp(x)
srednia[i] <- mean(y)
wariancja[i] <- var(y)
}
mean(srednia)
mean(wariancja)
n <- 10000
srednia <- numeric(n)
wariancja <- numeric(n)
for(i in 1:n) {
x <- rnorm(10000, log(sqrt(2)), 0.835)
y <- exp(x)
srednia[i] <- mean(y)
wariancja[i] <- var(y)
}
mean(srednia)
mean(wariancja)
n <- 10000
srednia <- numeric(n)
wariancja <- numeric(n)
for(i in 1:n) {
x <- rnorm(10000, log(sqrt(2)), 0.834)
y <- exp(x)
srednia[i] <- mean(y)
wariancja[i] <- var(y)
}
mean(srednia)
mean(wariancja)
n <- 10000
srednia <- numeric(n)
wariancja <- numeric(n)
for(i in 1:n) {
x <- rnorm(10000, log(sqrt(2)), 0.833)
y <- exp(x)
srednia[i] <- mean(y)
wariancja[i] <- var(y)
}
mean(srednia)
mean(wariancja)
n <- 10000
srednia <- numeric(n)
wariancja <- numeric(n)
for(i in 1:n) {
x <- rnorm(10000, log(sqrt(2)), 0.8325)
y <- exp(x)
srednia[i] <- mean(y)
wariancja[i] <- var(y)
}
mean(srednia)
mean(wariancja)
n <- 10000
srednia <- numeric(n)
wariancja <- numeric(n)
for(i in 1:n) {
x <- rnorm(10000, log(sqrt(2)), 0.8325)
y <- exp(x)
srednia[i] <- mean(y)
wariancja[i] <- var(y)
}
mean(srednia)
mean(wariancja)
12e9
12e9/38e6
12e10/38e6
(300000000000*4)/38000000
(300000000000*4)/38000000*4
setwd("~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots")
library(data.table)
dt <- data.table(
Values = runif(40, min = -1.0, max = 2.0),
Weights = runif(40, min = 50000, max = 10^6)
)
set.seed(123)
dt <- data.table(
Values = runif(40, min = -1.0, max = 2.0),
Weights = runif(40, min = 50000, max = 10^6)
)
dt
set.seed(123)
dt <- data.table(
Values = runif(40, min = -1.0, max = 2.0),
Weights = gamma(40)
)
dt
dt <- data.table(
Values = runif(40, min = -1.0, max = 2.0),
Weights = rgamma(40, 3)
)
dt
dt <- data.table(
Values = runif(40, min = -1.0, max = 2.0),
Weights = rgamma(40, 3) * 10^5
)
dt
plot(dt$Weights)
plot(density(dt$Weights))
dt <- data.table(
Values = runif(40, min = -1.0, max = 2.0),
Weights = rgamma(40, 2) * 10^5
)
dt
plot(density(dt$Weights))
source("./weighted_quantiles/weighted_quantiles.R")
source("./weighted_quantiles/weighted_quantiles.R")
weightedQuantiles <- function(x, probs=c(0, 0.25, 0.5, 0.75, 1.0), weights=NULL, na.rm=TRUE) {
require(data.table)
if( is.null(weights) ) {
weights <- rep(1, times = length(x) )
}
dt <- data.table(
Values = x,
Weights = weights
)
setorder(dt, Weights)
dt[,WeightsCum:=cumsum(Weights)/sum(Weights) ]
return(dt)
}
weightedQuantiles(x = dt)
weightedQuantiles(x = dt)
source("./weighted_quantiles/weighted_quantiles.R")
source("./customized_boxplots/customized_boxplots.R")
weightedQuantiles(x = dt)
dt
a <- weightedQuantiles(x = dt)
a
a
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
a
a
weightedQuantiles <- function(x, probs=c(0, 0.25, 0.5, 0.75, 1.0), weights=NULL, na.rm=TRUE) {
require(data.table)
x <- copy(x)
if( is.null(weights) ) {
weights <- rep(1, times = length(x) )
}
dt <- data.table(
Values = x,
Weights = weights
)
setorder(dt, Weights)
dt[,WeightsCum:=cumsum(Weights)/sum(Weights) ]
quantile_results <- data.table(
Quantile=probs
)
for( q in probs ) {
bound_cum_weights <- searchQuantileProbs(dt, prob = q)
}
return(dt)
}
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
a
weightedQuantiles <- function(x, probs=c(0, 0.25, 0.5, 0.75, 1.0), weights=NULL, na.rm=TRUE) {
require(data.table)
x <- copy(x)
if( is.null(weights) ) {
weights <- rep(1, times = length(x) )
}
dt <- data.table(
Values = x,
Weights = weights
)
setorder(dt, Values)
dt[,WeightsCum:=cumsum(Weights)/sum(Weights) ]
quantile_results <- data.table(
Quantile=probs
)
for( q in probs ) {
bound_cum_weights <- searchQuantileProbs(dt, prob = q)
}
return(dt)
}
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
a
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
searchQuantileProbs(dt, prob = q)
return(x)
searchQuantileProbs <- function(x, prob) {
stopifnot(is.data.table(x))
stopifnot(identical( names(x), c("Values", "Weights", "WeightsCum") ))
lower_prob <- max(x[WeightsCum<=prob, WeightsCum])
upper_prob <- min(x[WeightsCum>=prob, WeightsCum])
values <- c(lower_prob, upper_prob)
values <- removeNAOrInf(values)
return( values )
}
removeNAOrInf <- function(x) {
x <- x[!is.na(x)&!is.infinite(x)]
return(x)
}
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
searchQuantileProbs(dt, prob = q)
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
searchQuantileProbs(dt, prob = q)
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
searchQuantileProbs(dt, prob = q)
val
w <- abs(bound_cum_weights-q)
w
sel_rows <- dt[WeightsCum%in%bound_cum_weights]
w <- abs(bound_cum_weights-q)
source('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
source('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
source('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
a
a
dt
setorder(xxx, Values)
xxx <- copy(dt)
setorder(xxx, Values)
xxx[,WC:=cumsum(Weights)/sum(Weights)]
xxx
plot(density(dt$Weights))
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
a
a
source('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
debugSource('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
x
x
source('~/Documents/praca/projekty/weighted_quantiles_and_customized_boxplots/weighted_quantiles/weighted_quantiles.R', echo=TRUE)
a
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
a
a
a
dt[sample(c(T,F), 40, T, c(0.1, 0.9))]
dt
set.seed(123)
dt <- data.table(
Values = sample(1:100, 40),
Weights = rgamma(40, 2) * 10^5
)
dt[sample(c(T,F), 40, T, c(0.1, 0.9))]
dt
dt[1:3, Weights:=Weights*100]
set.seed(123)
dt <- data.table(
Values = sample(1:100, 40),
Weights = rgamma(40, 2) * 10^3
)
dt[1:3, Weights:=Weights*100]
dt
xxx <- copy(dt)
setorder(xxx, Values)
xxx[,WC:=cumsum(Weights)/sum(Weights)]
xxx
dt[, Weights:=round(Weights, 0)]
dt
set.seed(123)
dt <- data.table(
Values = sample(1:100, 40),
Weights = rgamma(40, 2) * 10^3
)
dt[1:3, Weights:=Weights*100]
dt[, Weights:=round(Weights, 0)]
dt
xxx <- copy(dt)
setorder(xxx, Values)
xxx[,WC:=cumsum(Weights)/sum(Weights)]
xxx
plot(density(dt$Weights))
a <- weightedQuantiles(x = dt$Values, weights = dt$Weights)
a
a
summarydata<-list(stats=matrix(c(1,2,3,4,5),5,1), n=10)
bxp(summarydata)
summarydata
summarydata<-list(stats=matrix(c(1,2,3,4,5),5,1), n=5)
bxp(summarydata)
summarydata<-list(stats=matrix(c(1,2,3,4,5),5,1), n=3)
bxp(summarydata)
summarydata<-list(stats=matrix(c(1,2,3,4,5),5,1), n=10)
bxp(summarydata)
?bxp
bxp(summarydata, boxcol="red")
bxp(summarydata)
summarydata<-list(stats=matrix(c(1,1,1,4,5),5,1), n=10)
bxp(summarydata)
summarydata
invisible
summarydata<-list(stats=matrix(c(1,1,2,4,5),5,1), n=10)
bxp(summarydata)
summarydata<-list(stats=matrix(c(2,1,1,4,5),5,1), n=10)
bxp(summarydata)
summarydata<-list(stats=matrix(c(2,3,1,4,5),5,1), n=10)
bxp(summarydata)
summarydata<-list(stats=matrix(c(1,3,1,4,5),5,1), n=10)
bxp(summarydata)
summarydata<-list(stats=matrix(c(3,1,1,4,5),5,1), n=10)
bxp(summarydata)
summarydata<-list(stats=matrix(c(3.4,1,1,4,5),5,1), n=10)
bxp(summarydata)
